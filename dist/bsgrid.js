!function(){"use strict";angular.module("bsgrid",["ui.bootstrap","ngAnimate","ui.router","LocalStorageModule"])}(),function(){"use strict";function e(e){return{scope:!0,link:function(t,n,o){var i;o.$observe("bsGridCellTemplate",function(o){angular.isDefined(o)&&(i=e(o)(t),n.html(""),n.append(i))})}}}angular.module("bsgrid").directive("bsGridCellTemplate",e),e.$inject=["$compile"]}(),function(){"use strict";function e(e){e.setPrefix("bsgrid")}angular.module("bsgrid").config(e),e.$inject=["localStorageServiceProvider"]}(),function(){"use strict";function e(){function e(e,t,n,o,i,s){e.filteredItems=e.options.items,e.displayedItems=[],e.showing={begin:0,end:0,of:0},e.setUndefined=function(){angular.isUndefined(e.options.pageSizeShow)&&(e.options.pageSizeShow=!0),angular.isUndefined(e.options.pageSize)&&(e.options.pageSize=25),angular.isUndefined(e.options.pageSizeOptions)&&(e.options.pageSizeOptions=[10,25,50,100]),angular.isUndefined(e.options.localStorage)&&(e.options.localStorage=!1),angular.isUndefined(e.options.localStorageIgnorePageSize)&&(e.options.localStorageIgnorePageSize=!1),angular.isUndefined(e.options.lockTable)&&(e.options.lockTable=!0),angular.isUndefined(e.options.selectable)&&(e.options.selectable=!1),angular.isUndefined(e.options.multiSelect)&&(e.options.multiSelect=!1),angular.isUndefined(e.options.scope)&&(e.options.scope=e),e.scope=e.options.scope,angular.isUndefined(e.options.showSearch)&&(e.options.showSearch=!0),angular.isUndefined(e.options.showFooter)&&(e.options.showFooter=!0),angular.isUndefined(e.options.showExportButton)&&(e.options.showExportButton=!0),angular.isUndefined(e.options.name)&&(e.options.name=i.current.name),angular.isUndefined(e.options.scrollHorizontal)&&(e.options.scrollHorizontal=!0),_.forEach(e.options.columns,function(e){if(angular.isUndefined(e.width)&&(e.width="auto"),angular.isUndefined(e.sortable)&&(e.sortable=!0),angular.isUndefined(e.name)&&angular.isUndefined(e.field))throw"bsgrid: Name is required if no field is provided.";angular.isUndefined(e.visible)&&(e.visible=!0)})},e.localStorageName=function(){return"bsGrid-"+e.options.name},e.getLocalStorage=function(){if(e.options.localStorage){var t=s.get(e.localStorageName());if(t&&(angular.isDefined(t.pageSize)&&!e.options.localStorageIgnorePageSize&&(e.options.pageSize=t.pageSize),angular.isDefined(t.columns))){var n=!1;_.forEach(t.columns,function(t,o){var i=_.findIndex(e.options.columns,{name:t.name});if(i>=0){if(o!==i){var s=e.options.columns[i];e.options.columns[i]=e.options.columns[o],e.options.columns[o]=s}e.options.columns[o].visible=t.visible,e.options.columns[o].sorted=t.sorted,angular.isDefined(t.reverse)&&(e.options.columns[o].reverse=t.reverse),t.sorted&&(n=!0)}}),n||(e.options.columns[0].sorted=!0)}}},e.hideColumn=function(t){t.visible=!t.visible,e.setLocalStorage()},e.setLocalStorage=function(){e.options.localStorage&&s.set(e.localStorageName(),{pageSize:e.options.pageSize,columns:e.options.columns})},e.onDropComplete=function(t,n){var o=e.options.columns.indexOf(n);e.options.columns.splice(o,1),e.options.columns.splice(t,0,n),e.setLocalStorage()},e.setWatches=function(){e.$watch(function(){return e.options.pageSize},function(){e.setLocalStorage(),e.options.currentPage=1,e.getPage()},!0),e.$watch(function(){return e.options.items},function(){var t=[];_.forEach(e.options.selectedItems,function(n){var o=_(e.options.items).indexOf(n);-1===o&&t.push(n)}),_.forEach(t,function(t){var n=null,o=null;angular.isDefined(t.id)&&(n=_.filter(e.options.items,{id:t.id}),1===n.length&&(o=n[0]));var i=_.indexOf(e.options.selectedItems,t);o?e.options.selectedItems.splice(i,1,o):e.options.selectedItems.splice(i)}),e.start()},!0)},e.getPage=function(){var t=(e.options.currentPage-1)*e.options.pageSize,n=t+e.options.pageSize;e.displayedItems=e.filteredItems.slice(t,n),0===e.displayedItems.length?e.showing.begin=t:e.showing.begin=t+1,e.showing.end=t+e.displayedItems.length,e.showing.of=e.filteredItems.length},e.sort=function(t,o){if(t.sortable===!0){_.forEach(e.options.columns,function(e){e!==t&&(e.sorted=!1,e.reverse=!1)}),t.sorted=!0,o&&(t.reverse=!t.reverse);var i=n("orderBy");e.filteredItems=i(e.filteredItems,t.field,t.reverse),e.getPage(),e.setLocalStorage()}},e.filter=function(){var t=n("filter");e.filteredItems=t(e.options.items,e.options.searchFilter),e.getPage()},e.selectItem=function(t){if(e.options.selectable){var n=_.indexOf(e.options.selectedItems,t);if(-1!==n)return void e.options.selectedItems.splice(n,1);e.options.multiSelect||1!==e.options.selectedItems.length||e.options.selectedItems.splice(0,1),e.options.selectedItems.push(t)}},e.selectItemCheckbox=function(t,n){t.stopPropagation(),e.selectItem(n)},e.isSelectedItem=function(t){var n=_.indexOf(e.options.selectedItems,t);return-1!==n?!0:!1},e.toggleSelectAll=function(t){t?_.forEach(e.filteredItems,function(t){e.isSelectedItem(t)||e.selectItem(t)}):_.forEach(e.filteredItems,function(t){e.isSelectedItem(t)&&e.selectItem(t)})},e.lockTable=function(){e.options.lockTable&&o(function(){var n=angular.element(t).find("div table thead tr th"),o=0;_.forEach(n,function(t){var n=angular.element(t);e.options.selectable&&0===o?o--:"auto"===e.options.columns[o].width&&angular.element(n).css("width",t.offsetWidth),o++});var i=angular.element(t).find("div table");angular.element(i).css("table-layout","fixed")},0)},e.start=function(){""!==e.options.searchFilter&&e.filter();var t=_.find(e.options.columns,"sorted");angular.isDefined(t)?e.sort(t,!1):e.getPage()},e.init=function(){e.setUndefined(),e.getLocalStorage(),e.setWatches(),e.lockTable(),e.start()},e.init(),e.exportTypes={FILTERED:0,SELECTED:1,ALL:2},e.GetRowsForExport=function(t,n,o){var i=0,s="",a=[];switch(t){case e.exportTypes.FILTERED:a=e.displayedItems;break;case e.exportTypes.SELECTED:a=e.options.selectedItems;break;case e.exportTypes.ALL:a=e.options.items}return _.each(a,function(t){_.each(n,function(n){s=angular.isDefined(t[n])?t[n]:angular.isDefined(t.search)&&angular.isDefined(t.search[n])?t.search[n]:"",o+='"'+e.csvStringify(s)+'",'}),o=e.swapLastCommaForNewline(o),i++}),o},e.csvStringify=function(e){return null===e||angular.isUndefined(e)?"":angular.isNumber(e)?""+e:e===!0||e===!1?e?"True":"False":angular.isString(e)?e.replace(/"/g,'""'):angular.toJson(e).replace(/"/g,'""')},e.swapLastCommaForNewline=function(e){var t=e.substr(0,e.length-1);return t+"\n"},e.SubmitFileToUser=function(e){var t=angular.element("<a/>");t.attr({href:"data:attachment/csv;charset=utf-8,"+encodeURI(e),target:"_blank",download:"export.csv"})[0].click()},e["export"]=function(t){var n=[],o="",i=[];_.each(e.options.columns,function(e){n.push(e.field),i.push(e.name)}),_.each(i,function(t){o+='"'+e.csvStringify(t)+'",'}),o=e.swapLastCommaForNewline(o),o=e.GetRowsForExport(t,n,o),e.SubmitFileToUser(o)}}return e.$inject=["$scope","$element","$filter","$timeout","$state","localStorageService"],{scope:{options:"="},templateUrl:"template/bsgrid.html",restrict:"E",controller:e}}angular.module("bsgrid").directive("bsGrid",e)}(),function(){"use strict";function e(e){return{restrict:"AC",link:function(t,n){e(function(){n[0].focus()},0)}}}angular.module("bsgrid").directive("bsgridAutoFocus",e),e.$inject=["$timeout"]}(),function(){"use strict";function e(e){function t(e,n){var o,i,s=/(^-?[0-9]+(\.?[0-9]*)[df]?e?[0-9]?$|^0x[0-9a-f]+$|[0-9]+)/gi,a=/(^[ ]*|[ ]*$)/g,l=/(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,r=/^0x[0-9a-f]+$/i,c=/^0/,p=function(e){return t.insensitive&&(""+e).toLowerCase()||""+e},d=p(e).replace(a,"")||"",u=p(n).replace(a,"")||"",g=d.replace(s,"\x00$1\x00").replace(/\0$/,"").replace(/^\0/,"").split("\x00"),f=u.replace(s,"\x00$1\x00").replace(/\0$/,"").replace(/^\0/,"").split("\x00"),m=parseInt(d.match(r))||1!=g.length&&d.match(l)&&Date.parse(d),h=parseInt(u.match(r))||m&&u.match(l)&&Date.parse(u)||null;if(h){if(h>m)return-1;if(m>h)return 1}for(var b=0,v=Math.max(g.length,f.length);v>b;b++){if(o=!(g[b]||"").match(c)&&parseFloat(g[b])||g[b]||0,i=!(f[b]||"").match(c)&&parseFloat(f[b])||f[b]||0,isNaN(o)!==isNaN(i))return isNaN(o)?1:-1;if(typeof o!=typeof i&&(o+="",i+=""),i>o)return-1;if(o>i)return 1}return 0}return function(n,o,i){function s(e,t){for(var n=0;n<o.length;n++){var i=o[n](e,t);if(0!==i)return i}return 0}function a(e,t){return t?function(t,n){return e(n,t)}:e}if(!angular.isArray(n))return n;if(!o)return n;o=angular.isArray(o)?o:[o],o=_.map(o,function(n){var o=!1,i=n||angular.identity;if(angular.isString(n)&&(("+"==n.charAt(0)||"-"==n.charAt(0))&&(o="-"==n.charAt(0),n=n.substring(1)),i=e(n),i.constant)){var s=i();return a(function(e,n){return t(e[s],n[s])},o)}return a(function(e,n){return t(i(e),i(n))},o)});for(var l=[],r=0;r<n.length;r++)l.push(n[r]);return l.sort(a(s,i))}}angular.module("bsgrid").filter("naturalSortBy",e),e.$inject=["$parse"]}(),angular.module("bsgrid").run(["$templateCache",function(e){e.put("template/bsgrid.html",'<div class="row bs-grid-margin"><div class="col-sm-9"><div class="btn-group" uib-dropdown="" dropdown-append-to-body=""><button type="button" class="btn btn-default btn-sm" uib-dropdown-toggle="">Options <span class="caret"></span></button><ul uib-dropdown-menu="" role="menu"><li role="menuitem" ng-if="options.pageSizeShow" class="dropdown-header">Page Size</li><li role="menuitem" ng-if="options.pageSizeShow" ng-repeat="size in options.pageSizeOptions" ng-class="{\'active\': options.pageSize === size }"><a tabindex="-1" ng-click="options.pageSize = size">{{ size }}</a></li><li ng-if="options.pageSizeShow" class="divider"></li><li role="presentation" class="dropdown-header">Columns</li><li role="menuitem" ng-repeat="col in options.columns"><a ng-click="hideColumn(col)"><i ng-class="col.visible ? \'glyphicon glyphicon-ok\': \'glyphicon glyphicon-remove\'"></i> <span>{{ col.name }}</span></a></li></ul></div><div class="btn-group" ng-if="options.showExportButton" uib-dropdown="" dropdown-append-to-body=""><button class="btn btn-default btn-sm" type="button" uib-dropdown-toggle="">Export <span class="caret"></span></button><ul uib-dropdown-menu="" role="menu"><li role="menuitem"><a ng-click="export(exportTypes.FILTERED)">Filtered</a></li><li role="menuitem"><a ng-click="export(exportTypes.ALL)">All</a></li><li role="menuitem" ng-if="options.selectedItems[0]"><a ng-click="export(exportTypes.SELECTED)">Selected</a></li></ul></div></div><div ng-if="options.showSearch" class="col-sm-3" style="margin-bottom: 10px" ng-class="{ \'col-sm-offset-9\': !options.pageSizeShow }"><div class="input-group input-group-sm"><input type="text" class="form-control" placeholder="Search" ng-model="options.searchFilter" ng-change="filter()" ng-model-options="{ debounce: { \'default\': 400, \'blur\': 0 } }" bsgrid-auto-focus=""> <span class="input-group-addon"><i class="glyphicon glyphicon-search"></i></span></div></div></div><div class="row"><div class="col-md-12" ng-class="{\'table-responsive\': options.scrollHorizontal}"><table class="table table-striped table-bordered table-hover table-condensed color2"><thead><tr><th ng-if="options.multiSelect" class="bs-grid-select"><input ng-if="options.multiSelect" type="checkbox" ng-model="selectAllToggle" ng-change="toggleSelectAll(selectAllToggle)"></th><th class="bs-grid-overflow" ng-repeat="col in options.columns" ng-click="sort(col, true)" style="width: {{ col.width }};" ng-show="col.visible"><div ng-drop="true" ng-drop-success="onDropComplete($index, $data, $evt)"><div ng-drag="true" ng-drag-data="col"><span>{{ col.name || col.field }}</span> <span ng-if="col.sorted" class="order" ng-class="{\'dropup\': col.reverse }"><span class="caret"></span></span></div></div></th></tr></thead><tbody><tr ng-repeat="item in displayedItems" ng-class="{\'info\' : isSelectedItem( item ) }" ng-click="selectItem(item)"><td ng-if="options.multiSelect"><input type="checkbox" class="bg-grid-checkbox" ng-checked="isSelectedItem(item)" ng-click="selectItemCheckbox($event, item)"></td><td class="bs-grid-overflow" ng-repeat="col in options.columns" ng-show="col.visible"><div ng-if="col.template" bs-grid-cell-template="{{ col.template }}"></div><div ng-if="!col.template" class="bs-grid-column bs-grid-column-{{col.field}}">{{ item[col.field] }}</div></td></tr></tbody></table></div></div><div class="row" ng-if="options.showFooter"><div class="col-sm-4"><span ng-if="options.selectable && options.selectedItems.length != 0">Selected <strong class=\'\\"text-primary\\"\'>{{options.selectedItems.length}}</strong></span> <span ng-class="{ \'text-danger\': displayedItems.length == 0}">Showing <strong>{{showing.begin}}</strong> to <strong>{{showing.end}}</strong> of <strong class=\'\\"text-primary\\"\'>{{ showing.of}}</strong> items</span><p ng-if="options.searchFilter">(<em>Filtered down from <strong>{{options.items.length}}</strong></em>)</p></div><div class="col-sm-8"><uib-pagination class="pagination-sm pull-right bs-grid-pagination" boundary-links="true" max-size="9" items-per-page="options.pageSize" total-items="filteredItems.length" ng-model="options.currentPage" ng-change="getPage()" previous-text="Previous" next-text="Next" first-text="First" last-text="Last"></uib-pagination></div></div>')}]);
//# sourceMappingURL=data:application/json;base64,
